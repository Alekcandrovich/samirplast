{"version":3,"file":"static/js/909.8f8dbf38.chunk.js","mappings":"8LAmFA,MAmCA,EAjCmBA,IAAyC,IAAxC,OAAEC,EAAM,OAAEC,EAAM,eAAEC,GAAgBH,EASpD,OARAI,EAAAA,EAAAA,YAAU,KACJF,EACFG,SAASC,KAAKC,UAAUC,IAAI,cAE5BH,SAASC,KAAKC,UAAUE,OAAO,aACjC,GACC,CAACP,KAGFQ,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,GAAIV,EAAQW,QAZF,EAY+BC,eAAa,EAAAC,SAC/DC,IACCC,EAAAA,EAAAA,MAACC,IAAK,CACJhB,OAAQA,EACRC,eAAgBA,EAChBgB,aAAa,cACbC,iBAAiB,gBACjBC,UAAS,uBAAAC,OAAyBN,GAAQD,SAAA,EAE1CL,EAAAA,EAAAA,KAAA,UAAQa,QAASpB,EAAgBkB,UAAU,cAAaN,UACtDL,EAAAA,EAAAA,KAAA,OAAKW,UAAU,aAAYN,UACzBL,EAAAA,EAAAA,KAAA,OAAKc,UAAS,GAAAF,OAAKG,EAAAA,EAAK,iBAG5Bf,EAAAA,EAAAA,KAAA,OAAKW,UAAU,kBAAiBN,UAC9BL,EAAAA,EAAAA,KAAA,OAAKgB,IAAKzB,EAAQ0B,IAAI,4DAAeN,UAAU,sBAI1C,C,oGC5GjB,MAgEA,EAhEgBO,KACd,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxC9B,EAAQ+B,IAAaD,EAAAA,EAAAA,UAAS,IAWrC,OACEd,EAAAA,EAAAA,MAAA,OAAKI,UAAU,YAAWN,SAAA,EACxBL,EAAAA,EAAAA,KAAA,MAAIW,UAAU,UAASN,SACpBkB,EAAaC,KACZ,CAAAlC,EAA0DmC,KAAE,IAA3D,YAAEC,EAAW,MAAEC,EAAK,cAAEC,EAAa,YAAEC,EAAW,IAAEC,GAAKxC,EAAA,OACtDiB,EAAAA,EAAAA,MAAA,MAAAF,SAAA,EACEL,EAAAA,EAAAA,KAAC+B,EAAAA,GAAI,CAACC,GAAE,aAAApB,OAAec,EAAYO,eAAgB5B,UACjDE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,gBAAeN,SAAA,EAC5BE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,gBAAeN,SAAA,EAC5BL,EAAAA,EAAAA,KAAA,OAAKgB,IAAKkB,cAAyBJ,EAAKb,IAAKU,KAC7C3B,EAAAA,EAAAA,KAAA,KAAGW,UAAU,eAAcN,SAAEwB,QAE/B7B,EAAAA,EAAAA,KAAA,OAAKW,UAAU,YAAWN,UACxBL,EAAAA,EAAAA,KAAA,OAAKW,UAAU,YAAWN,UACxBL,EAAAA,EAAAA,KAAA,MACEW,UAAU,aACVwB,MAAO,CAAEC,WAAY,YAAa/B,SAEjCuB,EAAcS,QAAQ,WAAY,kBAM7CrC,EAAAA,EAAAA,KAAA,OAAKW,UAAU,SAAQN,UACrBL,EAAAA,EAAAA,KAAA,UACEsC,KAAK,SACL3B,UAAU,gCACVE,QAASA,IArCPtB,KAChB+B,EAAU/B,GACV6B,GAAe,EAAK,EAoCJmB,CAAU,GAAD3B,OACJsB,cAAsB,YAAAtB,OAAWc,EAAW,SAElDrB,SACF,kEA5BIoB,EAgCJ,OAKXzB,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CACTjD,OAAQA,EACRC,OAAQ2B,EACR1B,eAjDagD,KACjBrB,GAAe,EAAM,MAkDf,C","sources":["components/Modal/ModalPrice.js","pages/Product/Product.js"],"sourcesContent":["// import React, { useEffect } from 'react';\n// import Modal from 'react-modal';\n// import { gsap } from 'gsap';\n// import icons from './icons.svg';\n// import './styles.css';\n\n// const ModalPrice = ({ imgSrc, isOpen, onRequestClose }) => {\n//   useEffect(() => {\n//     //   if (isOpen) {\n//     //     document.body.classList.add('modal-open');\n//     //   } else {\n//     //     document.body.classList.remove('modal-open');\n//     //   }\n//     // }, [isOpen]);\n\n//     console.log('isOpen changed:', isOpen);\n\n//     const modalContent = document.querySelector('.modal_content');\n\n//     if (isOpen) {\n//       // Перед открытием модального окна, устанавливаем стиль, чтобы GSAP мог изменять видимость\n//       gsap.set(modalContent, { maxHeight: '0%', scale: 0.8 });\n\n//       // Анимация появления\n//       gsap.to(modalContent, {\n//         duration: 1,\n//         maxHeight: '100%',\n//         scale: 1,\n//         ease: 'power2.inOut',\n//       });\n\n//       document.body.classList.add('modal-open');\n//     } else {\n//       // Анимация исчезновения\n//       gsap.to(modalContent, {\n//         duration: 0.5,\n//         maxHeight: '0%',\n//         scale: 0.8,\n//         ease: 'power2.inOut',\n//         onComplete: () => {\n//           document.body.classList.remove('modal-open');\n//         },\n//       });\n//     }\n//   }, [isOpen]);\n\n//   return (\n//     <Modal\n//       isOpen={isOpen}\n//       onRequestClose={onRequestClose}\n//       contentLabel=\"Image Modal\"\n//       overlayClassName=\"modal_overlay\"\n//       className=\"modal_content\"\n//       bodyOpenClassName=\"modal-open\"\n//     >\n//       <button onClick={onRequestClose} className=\"close_modal\">\n//         <svg className=\"icon_modal\">\n//           <use xlinkHref={`${icons}#close`} />\n//         </svg>\n//       </button>\n//       <div className=\"image_container\">\n//         <img src={imgSrc} alt=\"ПРАЙС - ЛИСТ\" className=\"modal_image\" />\n//       </div>\n//     </Modal>\n//   );\n// };\n\n// export default ModalPrice;\n\n\n\n\n\n\n\n\n\nimport React, { useEffect } from 'react';\nimport Modal from 'react-modal';\nimport { Transition } from 'react-transition-group';\nimport icons from './icons.svg';\nimport './styles.css';\n\nconst transitionDuration =0; // Длительность анимации в миллисекундах\n\nconst ModalPrice = ({ imgSrc, isOpen, onRequestClose }) => {\n  useEffect(() => {\n    if (isOpen) {\n      document.body.classList.add('modal-open');\n    } else {\n      document.body.classList.remove('modal-open');\n    }\n  }, [isOpen]);\n\n  return (\n    <Transition in={isOpen} timeout={transitionDuration} unmountOnExit>\n      {state => (\n        <Modal\n          isOpen={isOpen}\n          onRequestClose={onRequestClose}\n          contentLabel=\"Image Modal\"\n          overlayClassName=\"modal_overlay\"\n          className={`modal_content modal-${state}`}\n        >\n          <button onClick={onRequestClose} className=\"close_modal\">\n            <svg className=\"icon_modal\">\n              <use xlinkHref={`${icons}#close`} />\n            </svg>\n          </button>\n          <div className=\"image_container\">\n            <img src={imgSrc} alt=\"ПРАЙС - ЛИСТ\" className=\"modal_image\" />\n          </div>\n        </Modal>\n      )}\n    </Transition>\n  );\n};\n\nexport default ModalPrice;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport ModalPrice from '../../components/Modal/ModalPrice';\nimport productsData from '../../assets/productsData.json';\nimport './styles.css';\n\nconst Product = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [imgSrc, setImgSrc] = useState('');\n\n  const openModal = imgSrc => {\n    setImgSrc(imgSrc);\n    setModalIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <ul className=\"content\">\n        {productsData.map(\n          ({ productName, title, title_product, description, img }, id) => (\n            <li key={id}>\n              <Link to={`/products/${productName.toLowerCase()}`}>\n                <div className=\"content__clik\">\n                  <div className=\"overlay-thumb\">\n                    <img src={process.env.PUBLIC_URL + img} alt={title} />\n                    <p className=\"overlay-text\">{description}</p>\n                  </div>\n                  <div className=\"flex-grow\">\n                    <div className=\"card-port\">\n                      <h2\n                        className=\"titel-port\"\n                        style={{ whiteSpace: 'pre-line' }}\n                      >\n                        {title_product.replace(/<br \\/>/g, '\\n')}\n                      </h2>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n              <div className=\"button\">\n                <button\n                  type=\"button\"\n                  className=\"price_button open-modal_price\"\n                  onClick={() =>\n                    openModal(\n                      `${process.env.PUBLIC_URL}/prices/${productName}.jpg`\n                    )\n                  }\n                >\n                  ПРАЙС - ЛИСТ\n                </button>\n              </div>\n            </li>\n          )\n        )}\n      </ul>\n\n      <ModalPrice\n        imgSrc={imgSrc}\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Product;"],"names":["_ref","imgSrc","isOpen","onRequestClose","useEffect","document","body","classList","add","remove","_jsx","Transition","in","timeout","unmountOnExit","children","state","_jsxs","Modal","contentLabel","overlayClassName","className","concat","onClick","xlinkHref","icons","src","alt","Product","modalIsOpen","setModalIsOpen","useState","setImgSrc","productsData","map","id","productName","title","title_product","description","img","Link","to","toLowerCase","process","style","whiteSpace","replace","type","openModal","ModalPrice","closeModal"],"sourceRoot":""}