{"version":3,"file":"static/js/679.22800715.chunk.js","mappings":"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","sources":["components/Modal/ModalPrice.js","components/Modal/ModalProduct.js","components/ProductsSet/ProductDetailSection.js","components/ProductsSet/ProductDetail.js","components/ButtonPrice/ButtonPrice.js","components/ProductsSet/ProductPage.js","pages/Products/Rukav.js"],"sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\nimport icons from './icons.svg';\nimport './styles.css';\n\nconst ModalPrice = ({ imgSrc, isOpen, onRequestClose }) => {\n  const [isClosing, setIsClosing] = useState(false);\n\n  const closeModal = useCallback(() => {\n    setIsClosing(true);\n    setTimeout(() => onRequestClose(), 500);\n  }, [onRequestClose]);\n\n  useEffect(() => {\n    const handleEscape = e => isOpen && e.key === 'Escape' && closeModal();\n\n    document.body.classList.toggle('modal-open', isOpen);\n    document.body.style.overflow = isOpen ? 'hidden' : 'auto';\n    document.addEventListener('keydown', handleEscape);\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'auto';\n      setIsClosing(false);\n    };\n  }, [isOpen, closeModal]);\n\n  const overlayClassName = isOpen ? 'modal_overlay active' : 'modal_overlay';\n  const modalClassName = isClosing\n    ? 'modal_price closing'\n    : isOpen\n    ? 'modal_price active'\n    : 'modal_price';\n\n  return (\n    <div\n      className={`${overlayClassName}`}\n      id=\"modalOverlay\"\n      onClick={closeModal}\n    >\n      <div className={`${modalClassName}`} onClick={e => e.stopPropagation()}>\n        <button onClick={closeModal} className=\"close_modal\">\n          <svg className=\"icon_modal\">\n            <use xlinkHref={`${icons}#close`} />\n          </svg>\n        </button>\n        <div className=\"image_container\">\n          <img src={imgSrc} alt=\"ПРАЙС - ЛИСТ\" className=\"modal_image\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalPrice;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport icons from './icons.svg';\nimport './styles.css';\n\nconst PrevArrow = ({ onClick }) => (\n  <div className=\"slide_arrow prev\" onClick={onClick}>\n    <svg className=\"icon_modal\">\n      <use xlinkHref={`${icons}#left`} />\n    </svg>\n  </div>\n);\n\nconst NextArrow = ({ onClick }) => (\n  <div className=\"slide_arrow next\" onClick={onClick}>\n    <svg className=\"icon_modal\">\n      <use xlinkHref={`${icons}#right`} />\n    </svg>\n  </div>\n);\n\nconst ModalProduct = ({ images, closeModal }) => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [isClosing, setIsClosing] = useState(false);\n\n  const closeAnimation = useCallback(() => {\n    setIsClosing(true);\n    setTimeout(() => {\n      setModalVisible(false);\n      closeModal();\n    }, 500);\n  }, [closeModal]);\n\n  useEffect(() => {\n    const closeOnEsc = event => {\n      if (event.key === 'Escape') {\n        closeAnimation();\n      }\n    };\n\n    document.body.addEventListener('keydown', closeOnEsc);\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      document.body.removeEventListener('keydown', closeOnEsc);\n      document.body.style.overflow = 'auto';\n    };\n  }, [closeAnimation]);\n\n  const settings = {\n    dots: true,\n    speed: 1500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    autoplay: true,\n    autoplaySpeed: 3000,\n    infinite: true,\n    pauseOnHover: false,\n    prevArrow: <PrevArrow />,\n    nextArrow: <NextArrow />,\n  };\n\n  useEffect(() => {\n    setModalVisible(true);\n  }, []);\n\n  const overlayClassName = modalVisible\n    ? 'modal_overlay active'\n    : 'modal_overlay';\n  const modalClassName = isClosing\n    ? 'modal_product closing'\n    : modalVisible\n    ? 'modal_product active'\n    : 'modal_product';\n\n  return (\n    <div className={`${overlayClassName}`} onClick={closeAnimation}>\n      <div className={`${modalClassName}`} onClick={e => e.stopPropagation()}>\n        <button type=\"button\" className=\"close_modal\" onClick={closeAnimation}>\n          <svg className=\"icon_modal\">\n            <use xlinkHref={`${icons}#close`} />\n          </svg>\n        </button>\n        <Slider {...settings}>\n          {images.map((imageData, index) => (\n            <div key={index} className=\"slide\">\n              <img\n                className=\"slide_img\"\n                src={imageData.imageSrc}\n                alt={`Slide ${index + 1}`}\n              />\n              <p\n                style={{\n                  textAlign: 'center',\n                  marginTop: '10px',\n                  width: '100%',\n                }}\n              >\n                {imageData.text.includes('(') ? (\n                  <>\n                    {imageData.text.substring(0, imageData.text.indexOf('('))}\n                    <span style={{ fontWeight: 'bold', color: 'red' }}>\n                      {imageData.text.substring(imageData.text.indexOf('('))}\n                    </span>\n                  </>\n                ) : (\n                  imageData.text\n                )}\n              </p>\n            </div>\n          ))}\n        </Slider>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalProduct;\n","import React from 'react';\n\nconst ProductDetailSection = ({\n  productImage,\n  title,\n  description,\n  openSlider,\n  sliderImages,\n}) => {\n  return (\n    <section className=\"section3\">\n      <div className=\"container\" onClick={() => openSlider(sliderImages)}>\n        <div className=\"product_detail open-modal_product\">\n          <img\n            className=\"product_detail_image\"\n            src={productImage}\n            alt={title}\n          />\n          <div className=\"product_detail_info\">\n            <h2>{title}</h2>\n            <p dangerouslySetInnerHTML={{ __html: description }} />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ProductDetailSection;\n","import React, { useState } from 'react';\nimport CreateImageSlider from '../Modal/ModalProduct';\nimport ProductDetailSection from './ProductDetailSection';\nimport './styles.css';\n\nconst ProductDetail = ({ product }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [images, setImages] = useState([]);\n\n  const openSlider = images => {\n    setIsModalOpen(true);\n    setImages(images);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setImages([]);\n  };\n\n  const createSliderImages = (product, prefix) => {\n    const sliderImages = [];\n\n    for (let index = 1; index <= 5; index++) {\n      const imageSrc = product[`${prefix}${index}`];\n      const textKey = `${prefix.replace('Img', 'Text')}${index}`;\n      const text = product[textKey];\n\n      if (imageSrc) {\n        sliderImages.push({\n          imageSrc: `${process.env.PUBLIC_URL}${imageSrc}`,\n          text: text,\n        });\n      }\n    }\n\n    return sliderImages;\n  };\n\n  if (!product) {\n    return null;\n  }\n\n  return (\n    <main>\n      <ProductDetailSection\n        productImage={process.env.PUBLIC_URL + product.productImg_1}\n        title={product.title_product_1}\n        description={product.description_detail_1}\n        openSlider={() =>\n          openSlider(createSliderImages(product, 'sliderImg_1_'))\n        }\n      />\n      {product.title_product_2 && (\n        <ProductDetailSection\n          productImage={process.env.PUBLIC_URL + product.productImg_2}\n          title={product.title_product_2}\n          description={product.description_detail_2}\n          openSlider={() =>\n            openSlider(createSliderImages(product, 'sliderImg_2_'))\n          }\n        />\n      )}\n      {isModalOpen && (\n        <CreateImageSlider images={images} closeModal={closeModal} />\n      )}\n    </main>\n  );\n};\n\nexport default ProductDetail;\n","import React from 'react';\nimport \"./styles.css\";\n\nconst ButtonPrice = ({ onClick }) => (\n  <section className=\"section4\">\n    <div className=\"button\">\n      <button\n        type=\"button\"\n        className=\"product_button open-modal_price\"\n        onClick={onClick}\n      >\n        ПОДИВИТИСЯ ПРАЙС - ЛИСТ\n      </button>\n    </div>\n  </section>\n);\n\nexport default ButtonPrice;\n","import React, { useState } from 'react';\nimport ProductDetails from './ProductDetail';\nimport ButtonPrice from '../../components/ButtonPrice/ButtonPrice';\nimport ModalPrice from '../../components/Modal/ModalPrice';\nimport productData from '../../assets/productsData.json';\n\nconst ProductPage = ({ productName }) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [imgSrc, setImgSrc] = useState('');\n\n  const product = productData.find(\n    product => product.productName === productName\n  );\n\n  if (!product) {\n    return <div>Product not found</div>;\n  }\n\n  const handleButtonPriceClick = () => {\n    const currentPath = window.location.pathname;\n    const imageName = currentPath.split('/').pop();\n\n    setImgSrc(`${process.env.PUBLIC_URL}/prices/${imageName}.jpg`);\n    setModalIsOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <>\n      <ProductDetails product={product} />\n      <ButtonPrice onClick={handleButtonPriceClick} />\n      <ModalPrice\n        imgSrc={imgSrc}\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n      />\n    </>\n  );\n};\n\nexport default ProductPage;","import React from 'react';\nimport ProductPage from '../../components/ProductsSet/ProductPage';\n\nconst Rukav = () => {\n  const productName = 'rukav';\n\n  return <ProductPage productName={productName} />;\n};\n\nexport default Rukav;"],"names":["_ref","imgSrc","isOpen","onRequestClose","isClosing","setIsClosing","useState","closeModal","useCallback","setTimeout","useEffect","handleEscape","e","key","document","body","classList","toggle","style","overflow","addEventListener","removeEventListener","overlayClassName","modalClassName","_jsx","className","concat","id","onClick","children","_jsxs","stopPropagation","xlinkHref","icons","src","alt","PrevArrow","NextArrow","_ref2","_ref3","images","modalVisible","setModalVisible","closeAnimation","closeOnEsc","event","settings","dots","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","infinite","pauseOnHover","prevArrow","nextArrow","type","Slider","map","imageData","index","imageSrc","textAlign","marginTop","width","text","includes","_Fragment","substring","indexOf","fontWeight","color","productImage","title","description","openSlider","sliderImages","dangerouslySetInnerHTML","__html","product","isModalOpen","setIsModalOpen","setImages","createSliderImages","prefix","replace","push","process","ProductDetailSection","productImg_1","title_product_1","description_detail_1","title_product_2","productImg_2","description_detail_2","CreateImageSlider","productName","modalIsOpen","setModalIsOpen","setImgSrc","productData","find","ProductDetails","ButtonPrice","handleButtonPriceClick","imageName","window","location","pathname","split","pop","ModalPrice","Rukav","ProductPage"],"sourceRoot":""}